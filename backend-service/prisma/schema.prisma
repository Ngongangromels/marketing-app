generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//one-to-many relation ("user and smsCampaign", "user and contact", "user and api", "user and invoicing")
// many-to-many relation ("user and operateur")

model User {
  id Int  @id @default(autoincrement())
  email String @unique
  name String
  password String
  solde Float @default(0.0)
  role Role  @default(SUPERADMIN)
  createAt DateTime @default(now()) 
  superAdmin SuperAdmin?
  retailer Retailer?
  finalCustomer FinalCustomer?
  contact Contact[]
  smsCampaign SmsCampaign[]
  api Api[]
  invoicing Invoicing? @relation(fields: [invoicingId], references: [id])
  invoicingId Int?
  operateur Tarif[]
}
// one-to-many relation ("superAdmin and retailer", "superAdmin and finalCustomer")
model SuperAdmin {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  retailer Retailer[]
  finalCustomer FinalCustomer[]
}
// one-to-many relation ("retailer and finalCustoner", "retailer and superAdmin")
model Retailer {
  id Int @id @default(autoincrement())
   user User @relation(fields: [userId], references: [id])
  userId Int @unique
  finalCustomer FinalCustomer[]
  superAdmin SuperAdmin @relation(fields: [superAdId], references: [id])
  superAdId Int
}
//one-to-many relation
model FinalCustomer {
  id Int @id @default(autoincrement())
  senderId String @db.VarChar(11)
   user User @relation(fields: [userId], references: [id])
  userId Int @unique
  retailer Retailer @relation(fields: [retailerId], references: [id])
  retailerId Int
  superAdmin SuperAdmin @relation(fields: [superAdId], references: [id])
  superAdId Int
}

//one-to-many relation (user)
model Contact {
  id Int @id @default(autoincrement())
  nameContact String
  numberContact Int
  creatAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  userId Int
}

// one-to-many relation ("smsCampaign and user", "smsCampaign and operateur", "smsCampaign and invoicing")
model SmsCampaign {
  id Int @id @default(autoincrement())
  nameCampaign String
  content String
  typeCampaign TypeCampaign @default(SMS)
   clickRate Int
   sendSms Int
   smsRead Int
   createAt DateTime @default(now())
  dataCampaign DateTime
  user User @relation(fields: [userId], references: [id])
  userId Int
  operateur Operateur @relation(fields: [operateurId], references: [id])
  operateurId Int
  invoicing Invoicing @relation(fields: [invoicingId], references: [id])
  invoicingId Int
}

// one-to-many relation (smsCampaign)
// many-to-many relation (user)
model Operateur {
  id Int @id @default(autoincrement())
  prefixe String 
  operatorName String
  pays String
  creatAt DateTime @default(now())
  smsCampaign SmsCampaign[]
  users Tarif[]
}
// many-to-many relation (user and aperateur) associatif table
model Tarif {
  user User @relation(fields: [userId], references: [id])
  userId Int
  operateur Operateur @relation(fields: [operateurId], references: [id])
  operateurId Int
  assigneAt DateTime @default(now())
  assignedBy String


  @@id([userId, operateurId])
}
// one-to-many relation ( user, smsCampaign)
model Invoicing {
  id Int @id @default(autoincrement())
  modeI ModeInvoicing @default(VOLUME)
  user User[]
  smsCompaign SmsCampaign[]
}

model Transaction {
  id Int @id @default(autoincrement())
  cost Float
  sentStatus Boolean
}
// one-to-many relation ()
model Api {
  id Int @id @default(autoincrement())
  baseUrl String
  typeApi TypeApi @default(GET)
  format Format @default(JSON)
  apiParameter String[]
  createAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  userId Int
}



enum TypeApi {
  GET
  POST
}

enum Format {
  JSON 
  RESTFULL
}

enum ModeInvoicing {
  VOLUME
  CURRENCY
}

enum TypeCampaign {
  SMS
  SMSENRICHI
}

enum Role {
  FINALCUSTOMER
  SUPERADMIN
  RETAILER
  
}



